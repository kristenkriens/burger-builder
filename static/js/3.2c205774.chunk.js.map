{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","label","elementConfig","elementType","value","invalid","shouldValidate","touched","changed","inputElement","inputClasses","validationError","push","classes","a","createElement","className","error","placeholder","Object","assign","join","onChange","options","map","option","key","displayValue","input","module","exports","checkoutSummary","contactData","CheckoutSummary","ingredients","checkoutCancelled","checkoutContinued","react_default","style","width","margin","Burger","Button","type","clicked","ContactData","state","orderForm","name","validation","required","valid","street","postalCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementId","_this","order","ings","total","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputId","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","inputIds","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","Order_CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"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","file":"static/js/3.2c205774.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css';\n\nconst Input = (props) => {\n  const { label, elementConfig, elementType, value, invalid, shouldValidate, touched, changed } = props;\n\n  let inputElement = null;\n\n  const inputClasses = [];\n  let validationError = null;\n  if(invalid && shouldValidate && touched) {\n    inputClasses.push(classes.invalid);\n\n    validationError = <div className={classes.error}>Please enter a valid {elementConfig.placeholder}</div>\n  }\n\n  switch(elementType) {\n    case ('input'):\n      inputElement = <input className={inputClasses.join(' ')} {...elementConfig} value={value} onChange={changed} />;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')} {...elementConfig} value={value} onChange={changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select className={inputClasses.join(' ')} value={value} onChange={changed}>\n          {elementConfig.options.map((option) => {\n            return (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            )\n          })}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')} {...elementConfig} value={value} onChange={changed} />;\n  }\n\n  return (\n    <div className={classes.input}>\n      <label>{label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  )\n}\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input__input__3iHzh\",\"invalid\":\"Input__invalid__flTJ3\",\"error\":\"Input__error__cRpQz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkoutSummary\":\"CheckoutSummary__checkoutSummary__2IGyO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactData\":\"ContactData__contactData__pKwfW\"};","import React from 'react';\nimport classes from './CheckoutSummary.css';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nconst CheckoutSummary = (props) => {\n  const { ingredients, checkoutCancelled, checkoutContinued } = props;\n\n  return (\n    <div className={classes.checkoutSummary}>\n      <h1>We hope it tastes great!</h1>\n      <div style={{width: '100%', margin: 'auto'}}>\n        <Burger ingredients={ingredients} />\n      </div>\n      <Button type=\"danger\" clicked={checkoutCancelled}>CANCEL</Button>\n      <Button type=\"success\" clicked={checkoutContinued}>CONTINUE</Button>\n    </div>\n  )\n}\n\nexport default CheckoutSummary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      postalCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Postal Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6,\n          maxLength: 7\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Email'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            { value: 'fastest', displayValue: 'Fastest' },\n            { value: 'cheapest', displayValue: 'Cheapest' }\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true,\n        touched: false\n      }\n    },\n    formIsValid: false\n  }\n\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n\n    for(let formElementId in this.state.orderForm) {\n      formData[formElementId] = this.state.orderForm[formElementId].value;\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      total: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n\n    this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler = (event, inputId) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputId], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputId].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputId]: updatedFormElement\n    });\n\n    let formIsValid = true;\n    for(let inputIds in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIds].valid && formIsValid;\n    }\n\n    this.setState({\n      orderForm: updatedOrderForm,\n      formIsValid: formIsValid\n    });\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for(let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((formElement) => {\n          return (\n            <Input\n              key={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              invalid={!formElement.config.valid}\n              shouldValidate={formElement.config.validation}\n              touched={formElement.config.touched}\n              changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n          )\n        })}\n        <Button type=\"success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n\n    if(this.props.loading) {\n      form = <Spinner />\n    }\n\n    return (\n      <div className={classes.contactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data');\n  }\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n\n    if(this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + '/contact-data'}\n            component={ContactData}\n          />\n        </div>\n      )\n    }\n\n    return summary;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  }\n}\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}