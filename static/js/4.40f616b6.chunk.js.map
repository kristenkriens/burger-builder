{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","Input","props","label","elementConfig","elementType","value","invalid","shouldValidate","touched","changed","inputElement","inputClasses","validationError","push","classes","a","createElement","className","error","placeholder","Object","assign","join","onChange","options","map","option","key","displayValue","input","module","exports","auth","Auth","state","authForm","email","type","validation","required","isEmail","valid","password","minLength","isSignUp","componentDidMount","_this","building","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","inputName","updatedAuthForm","updateObject","_Users_kristen_sites_learning_react_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","_this2","this","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_10__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","errorMessage","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_11__","clicked","Component","connect","token","burgerBuilder","dispatch","actions"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAiDeE,IA9CD,SAACC,GAAU,IACfC,EAAwFD,EAAxFC,MAAOC,EAAiFF,EAAjFE,cAAeC,EAAkEH,EAAlEG,YAAaC,EAAqDJ,EAArDI,MAAOC,EAA8CL,EAA9CK,QAASC,EAAqCN,EAArCM,eAAgBC,EAAqBP,EAArBO,QAASC,EAAYR,EAAZQ,QAEhFC,EAAe,KAEbC,EAAe,GACjBC,EAAkB,KAOtB,OANGN,GAAWC,GAAkBC,IAC9BG,EAAaE,KAAKC,IAAQR,SAE1BM,EAAkBhB,EAAAmB,EAAAC,cAAA,OAAKC,UAAWH,IAAQI,OAAxB,wBAAqDf,EAAcgB,cAGhFf,GACL,IAAM,QACJM,EAAed,EAAAmB,EAAAC,cAAA,QAAAI,OAAAC,OAAA,CAAOJ,UAAWN,EAAaW,KAAK,MAAUnB,EAA9C,CAA6DE,MAAOA,EAAOkB,SAAUd,KACpG,MACF,IAAM,WACJC,EAAed,EAAAmB,EAAAC,cAAA,WAAAI,OAAAC,OAAA,CAAUJ,UAAWN,EAAaW,KAAK,MAAUnB,EAAjD,CAAgEE,MAAOA,EAAOkB,SAAUd,KACvG,MACF,IAAM,SACJC,EACEd,EAAAmB,EAAAC,cAAA,UAAQC,UAAWN,EAAaW,KAAK,KAAMjB,MAAOA,EAAOkB,SAAUd,GAChEN,EAAcqB,QAAQC,IAAI,SAACC,GAC1B,OACE9B,EAAAmB,EAAAC,cAAA,UAAQW,IAAKD,EAAOrB,MAAOA,MAAOqB,EAAOrB,OACtCqB,EAAOE,iBAMlB,MACF,QACElB,EAAed,EAAAmB,EAAAC,cAAA,QAAAI,OAAAC,OAAA,CAAOJ,UAAWN,EAAaW,KAAK,MAAUnB,EAA9C,CAA6DE,MAAOA,EAAOkB,SAAUd,KAGxG,OACEb,EAAAmB,EAAAC,cAAA,OAAKC,UAAWH,IAAQe,OACtBjC,EAAAmB,EAAAC,cAAA,aAAQd,GACPQ,EACAE,yBC3CPkB,EAAAC,QAAA,CAAkBF,MAAA,sBAAAvB,QAAA,wBAAAY,MAAA,4CCAlBY,EAAAC,QAAA,CAAkBC,KAAA,wMCUZC,6MACJC,MAAQ,CACNC,SAAU,CACRC,MAAO,CACLhC,YAAa,QACbD,cAAe,CACbkC,KAAM,QACNlB,YAAa,SAEfd,MAAO,GACPiC,WAAY,CACVC,UAAU,EACVC,SAAS,GAEXC,OAAO,EACPjC,SAAS,GAEXkC,SAAU,CACRtC,YAAa,QACbD,cAAe,CACbkC,KAAM,WACNlB,YAAa,YAEfd,MAAO,GACPiC,WAAY,CACVC,UAAU,EACVI,UAAW,GAEbF,OAAO,EACPjC,SAAS,IAGboC,UAAU,KAGZC,kBAAoB,WACdC,EAAK7C,MAAM8C,UAA4C,MAAhCD,EAAK7C,MAAM+C,kBACpCF,EAAK7C,MAAMgD,sBAAsB,QAIrCC,oBAAsB,SAACC,EAAOC,GAC5B,IAAMC,EAAkBC,YAAaR,EAAKZ,MAAMC,SAAZf,OAAAmC,EAAA,EAAAnC,CAAA,GACjCgC,EAAYE,YAAaR,EAAKZ,MAAMC,SAASiB,GAAY,CACxD/C,MAAO8C,EAAMK,OAAOnD,MACpBoC,MAAOgB,YAAcN,EAAMK,OAAOnD,MAAOyC,EAAKZ,MAAMC,SAASiB,GAAWd,YACxE9B,SAAS,MAIbsC,EAAKY,SAAS,CAACvB,SAAUkB,OAG3BM,cAAgB,SAACR,GACfA,EAAMS,iBAENd,EAAK7C,MAAM4D,OAAOf,EAAKZ,MAAMC,SAASC,MAAM/B,MAAOyC,EAAKZ,MAAMC,SAASO,SAASrC,MAAOyC,EAAKZ,MAAMU,aAGpGkB,sBAAwB,WACtBhB,EAAKY,SAAS,SAACK,GACb,MAAO,CACLnB,UAAWmB,EAAUnB,qFAKlB,IAAAoB,EAAAC,KACDC,EAAoB,GAE1B,IAAI,IAAIvC,KAAOsC,KAAK/B,MAAMC,SACxB+B,EAAkBrD,KAAK,CACrBsD,GAAIxC,EACJyC,OAAQH,KAAK/B,MAAMC,SAASR,KAIhC,IAAI0C,EAAOH,EAAkBzC,IAAI,SAAC6C,GAChC,OACEC,EAAAxD,EAAAC,cAACwD,EAAA,EAAD,CACE7C,IAAK2C,EAAYH,GACjB/D,YAAakE,EAAYF,OAAOhE,YAChCD,cAAemE,EAAYF,OAAOjE,cAClCE,MAAOiE,EAAYF,OAAO/D,MAC1BC,SAAUgE,EAAYF,OAAO3B,MAC7BlC,eAAgB+D,EAAYF,OAAO9B,WACnC9B,QAAS8D,EAAYF,OAAO5D,QAC5BC,QAAS,SAAC0C,GAAD,OAAWa,EAAKd,oBAAoBC,EAAOmB,EAAYH,SAKnEF,KAAKhE,MAAMwE,UACZJ,EAAOE,EAAAxD,EAAAC,cAAC0D,EAAA,EAAD,OAGT,IAAIC,EAAe,KAEhBV,KAAKhE,MAAMiB,QACZyD,EACEJ,EAAAxD,EAAAC,cAAA,SAAIiD,KAAKhE,MAAMiB,MAAM0D,UAIzB,IAAIC,EAAe,KAMnB,OAJGZ,KAAKhE,MAAM6E,kBACZD,EAAeN,EAAAxD,EAAAC,cAAC+D,EAAA,EAAD,CAAUC,GAAIf,KAAKhE,MAAM+C,oBAIxCuB,EAAAxD,EAAAC,cAAA,OAAKC,UAAWH,IAAQkB,MACrB6C,EACAF,EACDJ,EAAAxD,EAAAC,cAAA,QAAMiE,SAAUhB,KAAKN,eAClBU,EACDE,EAAAxD,EAAAC,cAACkE,EAAA,EAAD,CAAQ7C,KAAK,WAAb,WAEFkC,EAAAxD,EAAAC,cAACkE,EAAA,EAAD,CACE7C,KAAK,SACL8C,QAASlB,KAAKH,uBAFhB,aAIaG,KAAK/B,MAAMU,SAAW,UAAY,mBA1HpCwC,aAkJJC,sBAjBS,SAACnD,GACvB,MAAO,CACLuC,QAASvC,EAAMF,KAAKyC,QACpBvD,MAAOgB,EAAMF,KAAKd,MAClB4D,gBAAsC,OAArB5C,EAAMF,KAAKsD,MAC5BvC,SAAUb,EAAMqD,cAAcxC,SAC9BC,iBAAkBd,EAAMF,KAAKgB,mBAIN,SAACwC,GAC1B,MAAO,CACL3B,OAAQ,SAACzB,EAAOM,EAAUE,GAAlB,OAA+B4C,EAASC,IAAarD,EAAOM,EAAUE,KAC9EK,sBAAuB,kBAAMuC,EAASC,IAA4B,SAIvDJ,CAA6CpD","file":"static/js/4.40f616b6.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css';\n\nconst Input = (props) => {\n  const { label, elementConfig, elementType, value, invalid, shouldValidate, touched, changed } = props;\n\n  let inputElement = null;\n\n  const inputClasses = [];\n  let validationError = null;\n  if(invalid && shouldValidate && touched) {\n    inputClasses.push(classes.invalid);\n\n    validationError = <div className={classes.error}>Please enter a valid {elementConfig.placeholder}</div>\n  }\n\n  switch(elementType) {\n    case ('input'):\n      inputElement = <input className={inputClasses.join(' ')} {...elementConfig} value={value} onChange={changed} />;\n      break;\n    case ('textarea'):\n      inputElement = <textarea className={inputClasses.join(' ')} {...elementConfig} value={value} onChange={changed} />;\n      break;\n    case ('select'):\n      inputElement = (\n        <select className={inputClasses.join(' ')} value={value} onChange={changed}>\n          {elementConfig.options.map((option) => {\n            return (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            )\n          })}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input className={inputClasses.join(' ')} {...elementConfig} value={value} onChange={changed} />;\n  }\n\n  return (\n    <div className={classes.input}>\n      <label>{label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  )\n}\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input__input__3iHzh\",\"invalid\":\"Input__invalid__flTJ3\",\"error\":\"Input__error__cRpQz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Auth__auth__sQ1oj\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport classes from './Auth.css';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    authForm: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Email'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignUp: true\n  }\n\n  componentDidMount = () => {\n    if(!this.props.building && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath('/');\n    }\n  }\n\n  inputChangedHandler = (event, inputName) => {\n    const updatedAuthForm = updateObject(this.state.authForm, {\n      [inputName]: updateObject(this.state.authForm[inputName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.authForm[inputName].validation),\n        touched: true\n      })\n    });\n\n    this.setState({authForm: updatedAuthForm});\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n\n    this.props.onAuth(this.state.authForm.email.value, this.state.authForm.password.value, this.state.isSignUp);\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState((prevState) => {\n      return {\n        isSignUp: !prevState.isSignUp\n      }\n    })\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for(let key in this.state.authForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.authForm[key]\n      });\n    }\n\n    let form = formElementsArray.map((formElement) => {\n      return (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n      )\n    });\n\n    if(this.props.loading) {\n      form = <Spinner />\n    }\n\n    let errorMessage = null;\n\n    if(this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      );\n    }\n\n    let authRedirect = null;\n\n    if(this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button type=\"success\">SUBMIT</Button>\n        </form>\n        <Button\n          type=\"danger\"\n          clicked={this.switchAuthModeHandler}\n        >\n          SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}